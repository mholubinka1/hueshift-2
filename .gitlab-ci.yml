image: docker:latest
services:
  - docker:dind
before_script:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin "$DOCKER_REGISTRY"
  
stages:
  - build
  - confirmCoverage
  - cleanup

build-master:
  stage: build
  script:
    - docker build --rm=false --pull -t "$DOCKER_REGISTRY:dev" .
    - docker push "$DOCKER_REGISTRY:dev"
  after_script:
    - id=`docker images --filter "label=unit-test" -q`
    - docker container create --name test-report $id
    - docker cp test-report:/app/HueShift2Tests/unit_test_report.xml .
    - docker rm test-report
  artifacts:
    when: always
    paths:
      - ./unit_test_report.xml
      - ./coverage.xml
    reports:
      junit:
        - ./unit_test_report.xml
  only:
    - master
  tags:
    - docker
    
build-dev:
  stage: build
  script:
    - docker build --rm=false --pull -t "$DOCKER_REGISTRY:dev" .
    - docker push "$DOCKER_REGISTRY:dev"
  after_script:
    - id=`docker images --filter "label=unit-test" -q`
    - docker container create --name test-reports $id
    - docker cp test-reports:/app/HueShift2Tests/unit_test_report.xml .
    - docker cp test-reports:/app/HueShift2Tests/coverage .
    - docker rm test-report
  artifacts:
    when: always
    paths:
      - ./unit_test_report.xml
      - ./coverage.xml
    reports:
      junit:
        - ./unit_test_report.xml
  except:
    - master
  tags:
    - docker

check-coverage:
  image: alpine:latest
  stage: confirmCoverage
  variables:
    JOB_NAME: check-coverage
    TARGET_BRANCH: master
  before_script:
    - apk add --update --no-cache curl jq
  rules:
    - if: $CI_COMMMIT_BRANCH != $TARGET_BRANCH
  script:
    - echo success
  tags:
    - docker
    
cleanup:
  stage: cleanup
  script:
    - docker image prune -a -f
